import * as ts from 'typescript';
export declare const COMMON_IDENTIFIERS: {
    metadata: ts.Identifier;
    methodName: ts.Identifier;
    __name: ts.Identifier;
    __type: ts.Identifier;
    _fieldsSet: ts.Identifier;
    _returnValue: ts.Identifier;
    thrift: ts.Identifier;
    methodNames: ts.Identifier;
    _methodNames: ts.Identifier;
    methodParameters: ts.Identifier;
    _methodParameters: ts.Identifier;
    serviceName: ts.Identifier;
    fieldAnnotations: ts.Identifier;
    methodAnnotations: ts.Identifier;
    annotations: ts.Identifier;
    _serviceName: ts.Identifier;
    _fieldAnnotations: ts.Identifier;
    _methodAnnotations: ts.Identifier;
    _annotations: ts.Identifier;
    break: ts.Identifier;
    success: ts.Identifier;
    handler: ts.Identifier;
    _handler: ts.Identifier;
    super: ts.Identifier;
    this: ts.Identifier;
    flush: ts.Identifier;
    process: ts.Identifier;
    create: ts.Identifier;
    decode: ts.Identifier;
    encode: ts.Identifier;
    read: ts.Identifier;
    write: ts.Identifier;
    result: ts.Identifier;
    val: ts.Identifier;
    obj: ts.Identifier;
    callback: ts.Identifier;
    requestId: ts.Identifier;
    err: ts.Identifier;
    args: ts.Identifier;
    _args: ts.Identifier;
    undefined: ts.Identifier;
    input: ts.Identifier;
    data: ts.Identifier;
    writer: ts.Identifier;
    reader: ts.Identifier;
    output: ts.Identifier;
    protocol: ts.Identifier;
    transport: ts.Identifier;
    connection: ts.Identifier;
    messageType: ts.Identifier;
    rseqid: ts.Identifier;
    ftype: ts.Identifier;
    fname: ts.Identifier;
    fid: ts.Identifier;
    ret: ts.Identifier;
    fieldType: ts.Identifier;
    fieldName: ts.Identifier;
    fieldId: ts.Identifier;
    context: ts.Identifier;
    Context: ts.Identifier;
    Client: ts.Identifier;
    Processor: ts.Identifier;
    Map: ts.Identifier;
    Array: ts.Identifier;
    Set: ts.Identifier;
    String: ts.Identifier;
    Buffer: ts.Identifier;
    Boolean: ts.Identifier;
    Promise: ts.Identifier;
    reject: ts.Identifier;
    resolve: ts.Identifier;
    then: ts.Identifier;
    Number: ts.Identifier;
    Error: ts.Identifier;
    error: ts.Identifier;
    void: ts.Identifier;
    Int64: ts.Identifier;
    IHandler: ts.Identifier;
    ILocalHandler: ts.Identifier;
    Node_Int64: ts.Identifier;
    readStructBegin: ts.Identifier;
    readStructEnd: ts.Identifier;
};
