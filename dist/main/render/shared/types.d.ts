import * as ts from 'typescript';
import { FunctionType } from '@creditkarma/thrift-parser';
import { IRenderState } from '../../types';
export declare type TypeMapping = (fieldType: FunctionType, state: IRenderState, loose?: boolean) => ts.TypeNode;
export declare function createErrorType(): ts.TypeNode;
export declare function createUndefinedType(): ts.TypeNode;
export declare function createBufferType(): ts.TypeNode;
export declare function createPromiseType(typeArgument: ts.TypeNode): ts.TypeNode;
export declare function createArrayType(typeArgument: ts.TypeNode): ts.TypeNode;
export declare function createVoidType(): ts.TypeNode;
export declare function createAnyType(): ts.TypeNode;
export declare function createStringType(): ts.KeywordTypeNode;
export declare function createNumberType(): ts.KeywordTypeNode;
export declare function createBooleanType(): ts.KeywordTypeNode;
export declare function createTypeProperty(name: string, type: ts.TypeNode): ts.PropertySignature;
export declare type ClassNameWithStateMapping = (name: string, state: IRenderState) => string;
export declare type ClassNameWithoutStateMapping = (name: string) => string;
export declare type ClassNameMapping = ClassNameWithStateMapping | ClassNameWithoutStateMapping;
export declare function constructorNameForFieldType(fieldType: FunctionType, className: ClassNameMapping, state: IRenderState): ts.Identifier;
