import * as ts from 'typescript';
import { ContainerType, FieldDefinition, FunctionType, InterfaceWithFields } from '@creditkarma/thrift-parser';
import { DefinitionType, IRenderState } from '../../../types';
export declare function createReadMethod(struct: InterfaceWithFields, state: IRenderState): ts.MethodDeclaration;
export declare function createInputParameter(): ts.ParameterDeclaration;
export declare function createCaseForField(field: FieldDefinition, state: IRenderState): ts.CaseClause;
export declare function endReadForField(fieldName: ts.Identifier, field: FieldDefinition): Array<ts.Statement>;
export declare function metadataTypeForFieldType(fieldType: ContainerType): ts.TypeNode;
export declare function readValueForIdentifier(baseName: string, definition: DefinitionType, fieldType: FunctionType, fieldName: ts.Identifier, state: IRenderState): Array<ts.Statement>;
export declare function readValueForFieldType(fieldType: FunctionType, fieldName: ts.Identifier, state: IRenderState): Array<ts.Statement>;
export declare function readStructBegin(): ts.ExpressionStatement;
export declare function readStructEnd(): ts.ExpressionStatement;
export declare function readFieldBegin(): ts.CallExpression;
export declare function readFieldEnd(): ts.ExpressionStatement;
export declare function readMapBegin(): ts.CallExpression;
export declare function readMapEnd(): ts.CallExpression;
export declare function readListBegin(): ts.CallExpression;
export declare function readListEnd(): ts.CallExpression;
export declare function readSetBegin(): ts.CallExpression;
export declare function readSetEnd(): ts.CallExpression;
export declare function createSkipBlock(): ts.Block;
